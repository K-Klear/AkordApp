local UI = require("main/ui")

math.randomseed(os.time())
math.random(); math.random(); math.random()

local estimated_time, dots, years, nodes = 9, 0, false

local function update_bar()
	timer.delay(math.random()*(2.4-0.6)+0.6, false, update_bar)
	if years then 
		estimated_time = estimated_time + math.random(1, 8)
	else
		estimated_time = estimated_time + math.random(4, 58)
		if estimated_time >= 365 then
			years = true
			estimated_time = 1
		end
	end
	local text = "Odhadovaná délka stahování: "..estimated_time
	if years then
		if estimated_time > 1 then
			text = text.." let (0.00 TB ze 14.7 ZB)"
		else
			text = text.." rok (0.00 TB ze 14.7 ZB)"
		end
	else
		text = text.." dní (0.00 TB ze 14.7 ZB)"
	end
	gui.set_text(nodes.bar.estimate, text)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	UI.load_template({"one", "two"})
	nodes = {
		bar = {
			bar_1 = gui.get_node("bar_1"),
			bar_2 = gui.get_node("bar_2"),
			text = gui.get_node("bar_text"),
			downloading = gui.get_node("lbl_downloading"),
			estimate = gui.get_node("lbl_estimate"),
			transfer_rate = gui.get_node("lbl_transfer_rate")
		},
		logo = {
			arrow_left = gui.get_node("arrow_left"),
			arrow_right = gui.get_node("arrow_right"),
			text = gui.get_node("logo_text")
		}
	}
	for key, val in pairs(nodes.bar) do
		gui.set_enabled(val, false)
	end
	local function animate_dots()
		local text = "Downloading"
		for x = 1, dots do
			text = text.."."
		end
		dots = dots + 1
		if dots > 4 then dots = -1 end
		gui.set_text(nodes.bar.downloading, text)
	end
	timer.delay(0.4, true, animate_dots)
	gui.set_color(nodes.logo.text, vmath.vector4(1, 1, 1, 0))
	gui.animate(nodes.logo.arrow_left, "position.x", 223, gui.EASING_OUTSINE, 1.5)
	gui.animate(nodes.logo.arrow_right, "position.x", 417, gui.EASING_OUTSINE, 1.5, 0, function()
		gui.animate(nodes.logo.text, "color.w", 1, go.EASING_INBOUNCE, 1, 0, function()
			for key, val in pairs(nodes.bar) do
				gui.set_enabled(val, true)
			end
			timer.delay(1, false, update_bar)
		end)
	end)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		for key, val in ipairs(UI.active) do
			if val.type == hash("checkbox") then
				local node = gui.get_node(val.template.."/checkbox")
				if gui.pick_node(node, action.x, action.y) then
					if val.state then
						sound.play("/sound#ui_close")
						val.state = false
						gui.play_flipbook(node, "check_false")
					else
						sound.play("/sound#ui_open")
						val.state = true
						gui.play_flipbook(node, "check_true")
					end
				end
			end
		end
	end
end