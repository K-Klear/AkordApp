local UI = require("main/ui")

math.randomseed(os.time())
math.random(); math.random(); math.random()

local app_size, app_size_temp, estimated_time, dots, years, stage = 409, 409, 9, 0, false, 1
local nodes, update_timer, dots_timer, hint_timer
local hint_delay = 20

local function update_bar()
	update_timer = timer.delay(math.random()*(2.4-0.6)+0.6, false, update_bar)
	if years then 
		estimated_time = estimated_time + math.random(1, 8)
	else
		estimated_time = estimated_time + math.random(4, 58)
		if estimated_time >= 365 then
			years = true
			estimated_time = 1
		end
	end
	local text = "Odhadovaná délka stahování: "..estimated_time
	if years then
		if estimated_time > 1 then
			text = text.." let (0.00 TB ze "..(app_size / 10).." ZB)"
		else
			text = text.." rok (0.00 TB ze "..(app_size / 10).." ZB)"
		end
	else
		text = text.." dní (0.00 TB ze "..(app_size / 10).." ZB)"
	end
	
	gui.set_text(nodes.bar.estimate, text)
end

function init(self)
	--msg.post(".", "acquire_input_focus")
	nodes = {
		bar = {
			bar_1 = gui.get_node("bar_1"),
			bar_2 = gui.get_node("bar_2"),
			text = gui.get_node("bar_text"),
			downloading = gui.get_node("lbl_downloading"),
			estimate = gui.get_node("lbl_estimate"),
			transfer_rate = gui.get_node("lbl_transfer_rate")
		},
		logo = {
			arrow_left = gui.get_node("arrow_left"),
			arrow_right = gui.get_node("arrow_right"),
			text = gui.get_node("logo_text")
		},
		dialog = {
			background = gui.get_node("dialog_background"),
			download = gui.get_node("total_download"),
			AR_text = gui.get_node("lbl_AR_text"),
			AR_size = gui.get_node("lbl_AR_size"),
			soma_text = gui.get_node("lbl_soma_text"),
			soma_size = gui.get_node("lbl_soma_size"),
			fourd_text = gui.get_node("lbl_4d_text"),
			fourd_size = gui.get_node("lbl_4d_size"),
			ads_text = gui.get_node("lbl_ads_text"),
			ads_size = gui.get_node("lbl_ads_size"),
		},
		hint = {
			box = gui.get_node("hint_box")
		}
	}
	gui.set_enabled(nodes.hint.box, false)
	for key, val in pairs(nodes.bar) do
		gui.set_enabled(val, false)
	end
	gui.set_enabled(nodes.dialog.background, false)
	local function animate_dots()
		local text = "Downloading"
		for x = 1, dots do
			text = text.."."
		end
		dots = dots + 1
		if dots > 4 then dots = -1 end
		gui.set_text(nodes.bar.downloading, text)
	end
	dots_timer = timer.delay(0.4, true, animate_dots)
	gui.set_color(nodes.logo.text, vmath.vector4(1, 1, 1, 0))
	gui.animate(nodes.logo.arrow_left, "position.x", 223, gui.EASING_OUTSINE, 1.5)
	gui.animate(nodes.logo.arrow_right, "position.x", 417, gui.EASING_OUTSINE, 1.5, 0, function()
		gui.animate(nodes.logo.text, "color.w", 1, go.EASING_INBOUNCE, 1, 0, function()
			stage = 2
			for key, val in pairs(nodes.bar) do
				gui.set_enabled(val, true)
			end
			timer.delay(1, false, update_bar)
		end)
	end)
	hint_timer = timer.delay(hint_delay, false, function() gui.set_enabled(nodes.hint.box, true) end)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			if stage == 1 then
				gui.cancel_animation(nodes.logo.arrow_left, "position.x")
				gui.cancel_animation(nodes.logo.arrow_right, "position.x")
				gui.cancel_animation(nodes.logo.text, "color.w")
				gui.set_color(nodes.logo.text, vmath.vector4(1, 1, 1, 1))
				gui.set_position(nodes.logo.arrow_left, vmath.vector3(223, 800, 0))
				gui.set_position(nodes.logo.arrow_right, vmath.vector3(417, 800, 0))
				stage = 2
				for key, val in pairs(nodes.bar) do
					gui.set_enabled(val, true)
				end
				timer.delay(1, false, update_bar)
			elseif stage == 2 then
				gui.set_enabled(nodes.dialog.background, true)
				UI.load_template({"AR_checkbox", "soma_checkbox", "fourd_checkbox", "ads_checkbox", "accept", "cancel"})
				timer.cancel(hint_timer)
				gui.set_enabled(nodes.hint.box, false)
				stage = 3
			elseif stage == 3 and not gui.pick_node(nodes.dialog.background, action.x, action.y) then
				UI.unload_template()
				gui.set_enabled(nodes.dialog.background, false)
				stage = 2
				hint_timer = timer.delay(hint_delay, false, function() gui.set_enabled(nodes.hint.box, true) end)
			end
		elseif action.released then
			for key, val in ipairs(UI.active) do
				if val.type == hash("checkbox") then
					local node = gui.get_node(val.template.."/checkbox")
					if gui.pick_node(node, action.x, action.y) then
						local states = {[true] = {sound = "/sound#ui_close", image = "check_false"}, [false] = {sound = "/sound#ui_open", image = "check_true"}}
						sound.play(states[val.state].sound)
						gui.play_flipbook(node, states[val.state].image)
						val.state = not val.state
						msg.post("#", hash("template_clicked"), {state = val.state, template = val.template, type = val.type})
					end
				elseif val.type == hash("button") then
					local node = gui.get_node(val.template.."/button_box")
					if gui.pick_node(node, action.x, action.y) then
						msg.post("#", hash("template_clicked"), {template = val.template, type = val.type})
					end
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("template_clicked") then
		if message.type == hash("checkbox") then
			local boxes = {
				AR_checkbox = {text = "AR_text", size = "AR_size", module_size = 32},
				soma_checkbox = {text = "soma_text", size = "soma_size", module_size = 54},
				fourd_checkbox = {text = "fourd_text", size = "fourd_size", module_size = 40},
				ads_checkbox = {text = "ads_text", size = "ads_size", module_size = 283}
			}
			if message.state then
				gui.set_color(nodes.dialog[boxes[message.template].text], vmath.vector4(1, 1, 1, 1))
				gui.set_color(nodes.dialog[boxes[message.template].size], vmath.vector4(0.6, 0.6, 0.6, 0.6))
				app_size_temp = app_size_temp + boxes[message.template].module_size
				gui.set_text(nodes.dialog.download, "Celkem ke stažení: "..(app_size_temp / 10).." ZB")
			else
				gui.set_color(nodes.dialog[boxes[message.template].text], vmath.vector4(0.5, 0.5, 0.5, 0.5))
				gui.set_color(nodes.dialog[boxes[message.template].size], vmath.vector4(0.2, 0.2, 0.2, 0.2))
				app_size_temp = app_size_temp - boxes[message.template].module_size
				gui.set_text(nodes.dialog.download, "Celkem ke stažení: "..(app_size_temp / 10).." ZB")
			end
		elseif message.type == hash("button") then
			if message.template == "accept" then
				sound.play("/sound#ui_open")
				UI.unload_template()
				gui.set_enabled(nodes.dialog.background, false)
				app_size = app_size_temp
				timer.cancel(update_timer)
				update_bar()
				if app_size == 0 then
					stage = 4
					timer.delay(0.5, false, function()
						timer.cancel(update_timer)
						timer.cancel(dots_timer)
						gui.set_text(nodes.bar.downloading, "Stahování dokončeno!")
						gui.set_position(nodes.bar.downloading, vmath.vector3(320, 365, 0))
						gui.set_pivot(nodes.bar.downloading, 0)
						gui.set_enabled(nodes.bar.estimate, false)
						gui.set_enabled(nodes.bar.transfer_rate, false)
						gui.set_color(nodes.bar.bar_2, vmath.vector4(0.9, 0.9, 0.9, 1))
						gui.set_color(nodes.bar.text, vmath.vector4(0, 0, 0, 1))
						gui.set_text(nodes.bar.text, "100 %")
						for key, val in pairs(nodes.bar) do
							gui.animate(val, "color.w", 0, gui.EASING_LINEAR, 5, 2)
						end
						for key, val in pairs(nodes.logo) do
							gui.animate(val, "color.w", 0, gui.EASING_LINEAR, 5, 2)
						end
						timer.delay(8, false, function() os.exit() end)
					end)
				else
					stage = 2
					hint_timer = timer.delay(hint_delay, false, function() gui.set_enabled(nodes.hint.box, true) end)
				end
			elseif message.template == "cancel" then
				sound.play("/sound#ui_close")
				UI.unload_template()
				gui.set_enabled(nodes.dialog.background, false)
				stage = 2
				hint_timer = timer.delay(hint_delay, false, function() gui.set_enabled(nodes.hint.box, true) end)
			end
		end
	end
end
