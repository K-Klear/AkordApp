local SET = require("modules/settings")
local UI = require("modules/ui")
local TEXT = require("modules/text")
local SND = require("modules/sound")

local nodes, hover

local MENU_OPEN_TIME = 0.4
local BUTTON_FLASH_TIME = 0.2
local BUTTON_PRESS_TIME = 0.05
local INPUT_ENABLED = true
local EMPTY_VECTOR = vmath.vector3()

local scanner_enabled, scan_in_progress, scan_initiated
local scanner_text_timer
local mouse_held

local PANEL = {main = {}, events = {}, people = {}, eula = {}, credits = {}, employ = {}, exit = {}}--, login = {}}
local current_dialogs = {}

local button_settings = {
	[hash("button")] = {
		suffix = "/button_box",
		base_anim = "button_black",
		base_text_colour = vmath.vector4(1),
		hover_text_colour = vmath.vector4(0, 0, 0, 1),
		press_offset = vmath.vector3(0),
		down = "button_black_down",
		up = "button_black_up"
	},
	[hash("button_map")] = {
		suffix = "/button_map",
		base_anim = "mapa",
		base_text_colour = vmath.vector4(0),
		hover_colour = vmath.vector4(0.6, 1, 0.8, 1),
		hover_text_colour = vmath.vector4(0),
		press_offset = vmath.vector3(0),
		down = "mapa",
		up = "mapa"
	},
	[hash("button_white")] = {
		suffix = "/button_white",
		base_anim = "button_white",
		base_text_colour = vmath.vector4(0, 0, 0, 1),
		hover_anim = "button_white_hover",
		hover_text_colour = vmath.vector4(0, 0, 0, 1),
		press_offset = vmath.vector3(0),
		down = "button_white_down",
		up = "button_white_up"
	},
	[hash("button_black")] = {
		suffix = "/button_black",
		base_anim = "button_menu_base",
		base_text_colour = vmath.vector4(1),
		hover_anim = "button_menu_hover",
		hover_text_colour = vmath.vector4(1),--0, 0, 0, 1),
		press_offset = vmath.vector3(6, -6, 0),
		down = "button_menu_down",
		up = "button_menu_up"
	}
}

local function remove_hover()
	if hover then
		local button = UI.active[hover]
		if button_settings[button.type].hover_anim then
			if mouse_held then
				gui.play_flipbook(button.node, button_settings[button.type].up, function()
					gui.play_flipbook(button.node, button_settings[button.type].base_anim)
				end)
			else
				gui.play_flipbook(button.node, button_settings[button.type].base_anim)
			end
			local text_node = gui.get_node(button.template.."/text")
			gui.set_color(text_node, button_settings[button.type].base_text_colour)
			gui.animate(text_node, "position", EMPTY_VECTOR, go.EASING_LINEAR, BUTTON_PRESS_TIME)
		elseif button_settings[UI.active[hover].type].hover_colour then
			gui.set_color(button.node, vmath.vector4(1))
		end
		hover = nil
	end
end

local function open_dialog(dialog, transition, time, props)
	if dialog == "main" then

	else
		SND.play("#open")
	end
	time = time or MENU_OPEN_TIME
	local base = PANEL[dialog].base
	gui.set_enabled(base, true)
	remove_hover()
	UI.unload_template()
	table.insert(current_dialogs, dialog)
	local function enable_panel()
		UI.load_template(PANEL[dialog].BUTTON_LIST)
	end
	if transition == hash("fade_in") then
		gui.set_alpha(base, 0)
		gui.animate(base, "color.w", 1, go.EASING_INSINE, time, 0, enable_panel)
	elseif transition == hash("expand_from_button") then
		gui.set_alpha(base, 0)
		gui.animate(base, "color.w", 1, go.EASING_INSINE, time / 2)
		local previous_position = gui.get_position(base)
		gui.set_position(base, gui.get_position(props.button))
		local size_btn = gui.get_size(props.button)
		local size_base = gui.get_size(base)
		local scale = vmath.vector3(size_btn.x / size_base.x, size_btn.y / size_base.y, 1)
		gui.set_scale(base, scale)
		gui.animate(base, "position", previous_position, go.EASING_INEXPO, time)
		gui.animate(base, "scale", vmath.vector3(1), go.EASING_INEXPO, time, 0, enable_panel)

		--gui.animate(base, "scale.x", 1, go.EASING_OUTSINE, time * 0.5)
		--gui.animate(base, "scale.y", 1, go.EASING_OUTSINE, time * 0.75, time * 0.25, enable_panel)
		--gui.animate(base, "position", previous_position, go.EASING_OUTSINE, time * 0.75, time * 0.25)
	end
end

local function reactivate_dialog()
	gui.set_enabled(PANEL[current_dialogs[#current_dialogs]].base, false)
	table.remove(current_dialogs, #current_dialogs)
	UI.load_template(PANEL[current_dialogs[#current_dialogs]].BUTTON_LIST)
end

local function close_dialog(transition, time, props, next_dialog)
	time = time or MENU_OPEN_TIME
	next_dialog = next_dialog or function() end
	dialog = current_dialogs[#current_dialogs]
	local base = PANEL[dialog].base
	remove_hover()
	UI.unload_template()
	local function disable_panel()
		gui.set_enabled(base, false)
		reactivate_dialog()
		next_dialog()
	end
	SND.play("#close_dialog")
	if transition == hash("contract") then
		gui.animate(base, "color.w", 0, gui.EASING_OUTSINE, time / 2, time / 2)
		gui.animate(base, "scale", 0, gui.EASING_OUTSINE, time, 0, disable_panel)
	elseif transition == hash("contract_to_button") then
		local previous_position = gui.get_position(base)
		local size_btn = gui.get_size(props.button)
		local size_base = gui.get_size(base)
		local scale = vmath.vector3(size_btn.x / size_base.x, size_btn.y / size_base.y, 1)
		gui.animate(base, "color.w", 0, gui.EASING_OUTSINE, time / 2, time / 2)
		gui.animate(base, "scale", scale, gui.EASING_OUTEXPO, time)
		gui.animate(base, "position", gui.get_position(props.button), gui.EASING_OUTEXPO, time, 0, function()
			disable_panel()
			gui.set_position(base, previous_position)
			gui.set_scale(base, vmath.vector3(1))
		end)
	end
end

function init(self)

	PANEL.main = {
		base = gui.get_node("panel_main"),
		btn_events = gui.get_node("events/button_white"),
		btn_people = gui.get_node("people/button_white"),
		btn_credits = gui.get_node("credits/button_white"),
		btn_exit = gui.get_node("exit/button_white"),
		btn_login = gui.get_node("login/button_white"),
		btn_eula = gui.get_node("eula/button_white"),

		BUTTON_LIST = {"events", "people", "credits", "exit", "eula", "login"},
		input_eval = PANEL.main.input_eval
	}

	PANEL.events = {
		base = gui.get_node("dialog_events"),
		text = gui.get_node("events_text"),

		BUTTON_LIST = {"events_ok", "eula", "events_map"},
		input_eval = PANEL.events.input_eval
	}

	PANEL.people = {
		base = gui.get_node("dialog_people"),
		name = gui.get_node("people_name"),
		alias = gui.get_node("people_alias"),
		text = gui.get_node("people_text"),
		portrait = gui.get_node("people_portrait"),
		portrait_2 = gui.get_node("people_portrait_2"),

		BUTTON_LIST = {"people_ok", "people_verkant", "people_arkadij", "people_holkogramy", "people_fhill", "people_agatha",
		"people_jack", "people_claudia", "people_emmett", "people_zanziro", "people_zuzka", "eula"},
		input_eval = PANEL.people.input_eval
	}

	PANEL.credits = {
		base = gui.get_node("dialog_credits"),
		title = gui.get_node("credits_title"),
		text = gui.get_node("credits_text"),
		btn_mode = gui.get_node("credits_cast/text"),

		BUTTON_LIST = {"credits_ok", "eula", "credits_cast"},
		input_eval = PANEL.credits.input_eval
	}
	
	PANEL.exit = {
		base = gui.get_node("dialog_exit"),

		BUTTON_LIST = {"exit_ok", "exit_back", "eula"},
		input_eval = PANEL.exit.input_eval
	}

	PANEL.employ = {
		base = gui.get_node("dialog_employ"),
		title = gui.get_node("employ_title"),

		BUTTON_LIST = {"employ_ok"},
		input_eval = PANEL.employ.input_eval
	}

	PANEL.eula = {
		base = gui.get_node("dialog_eula"),

		BUTTON_LIST = {"eula_accept_1", "eula_accept_2"},
		input_eval = PANEL.eula.input_eval
	}
	
	nodes = {
		logo = {
			left = gui.get_node("logo_left"),
			right = gui.get_node("logo_right"),
			text = gui.get_node("logo_text")
		},
		employ = {
			dialog = gui.get_node("dialog_employ")
		}
	}
	
	for key, val in pairs(PANEL) do
		gui.set_enabled(val.base, false)
	end
	gui.set_enabled(nodes.employ.dialog, false)
	gui.animate(nodes.logo.left, "position", vmath.vector3(37, 1090, 0), go.EASING_OUTCUBIC, 1)
	gui.animate(nodes.logo.right, "position", vmath.vector3(37, 1090, 0), go.EASING_OUTCUBIC, 1)
	gui.animate(nodes.logo.left, "color", vmath.vector4(0, 0, 0, 1), go.EASING_INSINE, 1)
	gui.animate(nodes.logo.right, "color", vmath.vector4(0, 0, 0, 1), go.EASING_INSINE, 1)
	gui.animate(nodes.logo.left, "scale", vmath.vector3(1 / 16), go.EASING_OUTCUBIC, 1)
	gui.animate(nodes.logo.right, "scale", vmath.vector3(1 / 16), go.EASING_OUTCUBIC, 1, 0, function()
		SND.play("#open_app")
		TEXT.write(nodes.logo.text, "   AkordCorp", 0.1)
		timer.delay(0.5, false, function()
			open_dialog("main", hash("fade_in"), 1)
		end)
		msg.post(".", "acquire_input_focus")
	end)
end

local person_text_timer, person_name_timer, person_alias_timer

timer.cancel_better = function(handle)
	if handle then
		return timer.cancel(handle)
	end
end

local function display_person(person)
	person = person or "verkant"
	local DATA = TEXT.people_data[person]
	gui.play_flipbook(PANEL.people.portrait, DATA.portrait)
	if DATA.portrait_2 then
		gui.play_flipbook(PANEL.people.portrait_2, DATA.portrait_2)
		gui.set_enabled(PANEL.people.portrait_2, true)
	else
		gui.set_enabled(PANEL.people.portrait_2, false)
	end
	local text = DATA.name.."\n\n"..DATA.actor.."\n\n"..DATA.text
	timer.cancel_better(person_name_timer)
	timer.cancel_better(person_alias_timer)
	timer.cancel_better(person_text_timer)
	person_name_timer = TEXT.write(PANEL.people.name, DATA.name, 0.2, true)
	person_alias_timer = TEXT.write(PANEL.people.alias, DATA.actor, 0.1, true)
	person_text_timer = TEXT.write(PANEL.people.text, DATA.text, 0.03, true)
	--gui.set_text(PANEL.people.text, text)
end

function PANEL.main.input_eval(button)
	if button == "events" then
		local text = "Po mnohaleté práci tisíců zaměstanců AkordCorpu po celém světě je naší ctí odhalit plod naší práce. "
		text = text.."Vybraným hostům bude Projekt X představen na exkluzivní kyberprostorové prezentaci.\n\n"
		text = text.."Nejste mezi nimi? Nevadí! Vše potřebné se můžete dozvědět i na zvláštních akcích, které se budou konat"
		text = text.." ve fyzickém prostoru, a to konkrétně v prostorech Přírodovědecké fakulty UK, posluchárna VG, Albertov 6, Praha 2\n\n"
		text = text.."První termín - 17. 6. 2022, 18:00\nDruhý termín - 19. 6. 2022, 18:00\n"
		gui.set_text(PANEL.events.text, text)
		open_dialog("events", hash("expand_from_button"), nil, {button = PANEL.main.btn_events})
	elseif button == "people" then
		display_person("verkant")
		open_dialog("people", hash("expand_from_button"), nil, {button = PANEL.main.btn_people})
	elseif button == "credits" then
		open_dialog("credits", hash("expand_from_button"), nil, {button = PANEL.main.btn_credits})
	elseif button == "exit" then
		open_dialog("exit", hash("expand_from_button"), nil, {button = PANEL.main.btn_exit})
	elseif button == "login" then
		if scanner_text_timer then
			timer.cancel(scanner_text_timer)
			scanner_text_timer = nil
		end
		if SET.is_desktop then
			gui.set_text(PANEL.employ.title, "Nehýbejte se zatímco\nprobíhá sken sítnice")
		else
			gui.set_text(PANEL.employ.title, "Podržte palec\nuprostřed displeje")
		end
		open_dialog("employ", hash("expand_from_button"), nil, {button = PANEL.main.btn_login})
		timer.delay(MENU_OPEN_TIME, false, function()
			if SET.is_desktop then
				msg.post("scanner#scanner", hash("get_ready"), {start = true})
			else
				msg.post("scanner#scanner", hash("get_ready"))
				scanner_enabled = true
			end
		end)
	elseif button == "eula" then
		open_dialog("eula", hash("expand_from_button"), nil, {button = PANEL.main.btn_eula})
	end
end

function PANEL.events.input_eval(button)
	if button == "events_ok" then
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_events})
		--close_dialog(hash("contract"))
	elseif button == "events_map" then
		local web_url = "https://www.google.com/maps/place/P%C5%99%C3%ADrodov%C4%9Bdeck%C3%A1+fakulta+UK/@50.0677658,14.4220166,17z/data=!4m5!3m4!1s0x470b948a8298e12d:0xc34671cecfa94ef1!8m2!3d50.0689086!4d14.4245388"
		sys.open_url(web_url, {target = "_blank"})
	elseif button == "eula" then
		open_dialog("eula", hash("expand_from_button"), nil, {button = PANEL.main.btn_eula})
	end
end

function PANEL.people.input_eval(button)
	if button == "people_ok" then
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_people})
	elseif button == "people_verkant" then
		display_person("verkant")
	elseif button == "people_arkadij" then
		display_person("arkadij")
	elseif button == "people_holkogramy" then
		display_person("holkogramy")
	elseif button == "people_fhill" then
		display_person("fhill")
	elseif button == "people_agatha" then
		display_person("agatha")
	elseif button == "people_jack" then
		display_person("jack")
	elseif button == "people_claudia" then
		display_person("claudia")
	elseif button == "people_emmett" then
		display_person("emmett")
	elseif button == "people_zanziro" then
		display_person("zanziro")
	elseif button == "people_zuzka" then
		display_person("zuzka")
	elseif button == "eula" then
		open_dialog("eula", hash("expand_from_button"), nil, {button = PANEL.main.btn_eula})
	end
end

function PANEL.credits.input_eval(button)
	if button == "credits_ok" then
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_credits})
	elseif button == "credits_cast" then
		local next_dialog = function()
			display_person()
			open_dialog("people", hash("expand_from_button"), nil, {button = PANEL.main.btn_people})
		end
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_credits}, next_dialog)
	elseif button == "eula" then
		open_dialog("eula", hash("expand_from_button"), nil, {button = PANEL.main.btn_eula})
	end
end

function PANEL.exit.input_eval(button)
	if button == "exit_ok" then
		INPUT_ENABLED = false
		PANEL.exit.input_eval = function() end
		SND.play("#close_app")
		timer.delay(2.3, false, function()
			if SET.is_html5 then
				local web_url = "http://www.hamba.cz/"
				sys.open_url(web_url, {target = "_self"})
			else
				sys.exit(0)
			end
		end)
	elseif button == "exit_back" then
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_exit})
	elseif button == "eula" then
		open_dialog("eula", hash("expand_from_button"), nil, {button = PANEL.main.btn_eula})
	end
end

function PANEL.employ.input_eval(button)
	if button == "employ_ok" then
		scan_initiated = false
		scan_in_progress = false
		scanner_enabled = false
		msg.post("scanner#scanner", hash("hide"))
		close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_login})
	end
end

function PANEL.eula.input_eval(button)
	close_dialog(hash("contract_to_button"), nil, {button = PANEL.main.btn_eula})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("template_clicked") and INPUT_ENABLED then
		local function start_eval()
			INPUT_ENABLED = true
			PANEL[current_dialogs[#current_dialogs]].input_eval(message.template)
		end

		local button_data = UI.active[message.button]
		local type = button_data.type

		SND.play("#beep")
		
		if type == hash("button") then
			start_eval()
		else
			if SET.is_desktop then
				gui.play_flipbook(button_data.node, button_settings[type].up)
				local text_node = gui.get_node(button_data.template.."/text")
				gui.animate(text_node, "position", EMPTY_VECTOR, go.EASING_LINEAR, BUTTON_PRESS_TIME)
				--gui.set_position(text_node, EMPTY_VECTOR)
				start_eval()
			else
				INPUT_ENABLED = false
				local text_node = gui.get_node(message.template.."/text")
				--gui.set_color(text_node, button_settings[type].hover_text_colour)
				gui.play_flipbook(button_data.node, button_settings[type].down)
				timer.delay(BUTTON_PRESS_TIME, false, function()
					gui.play_flipbook(button_data.node, button_settings[type].up, function()
						gui.play_flipbook(button_data.node, button_settings[type].base_anim)
					end)
					gui.animate(text_node, "position", EMPTY_VECTOR, go.EASING_LINEAR, BUTTON_PRESS_TIME)
				end)
				local text_pos
				if button_settings[type].press_offset then
					gui.set_position(text_node, EMPTY_VECTOR)
					gui.animate(text_node, "position", button_settings[type].press_offset, go.EASING_LINEAR, BUTTON_PRESS_TIME)
				end
				timer.delay(BUTTON_PRESS_TIME * 4, false, function()
					start_eval()
				end)
			end
		end
		--[[

		elseif button_data.type == hash("button_white") then
			INPUT_ENABLED = false
			local node = gui.get_node(message.template.."/button_white")
			local node_text = gui.get_node(message.template.."/text")
			gui.set_color(node, UI.COLOUR_WHITE)
			gui.set_color(node_text, UI.COLOUR_BLACK)
			gui.animate(node, "color", UI.COLOUR_BLACK, go.EASING_LINEAR, BUTTON_FLASH_TIME, 0, nil, gui.PLAYBACK_ONCE_PINGPONG)
			gui.animate(node_text, "color", UI.COLOUR_WHITE, go.EASING_LINEAR, BUTTON_FLASH_TIME, 0, start_eval, gui.PLAYBACK_ONCE_PINGPONG)
		elseif button_data.type == hash("button_black") then
			INPUT_ENABLED = false
			local node = gui.get_node(message.template.."/button_black")
			local node_text = gui.get_node(message.template.."/text")
			gui.set_color(node_text, UI.COLOUR_BLACK)
			gui.play_flipbook(node, "button_black_pressed")
			timer.delay(BUTTON_FLASH_TIME, false, function()
				gui.set_color(node_text, UI.COLOUR_WHITE)
				gui.play_flipbook(node, "button_black")
				start_eval()
			end)

			
			elseif message.template == "employ" then
				UI.unload_template()
				gui.set_enabled(nodes.employ.dialog, true)
				msg.post("scanner#scanner", hash("get_ready"))
				scanner_enabled = true
				UI.load_template({"employ_ok"})
			elseif message.template == "employ_ok" then
				UI.unload_template()
				gui.set_enabled(nodes.employ.dialog, false)
				UI.load_template(MAIN_MENU_BUTTONS)
				scan_initiated = false
				scan_in_progress = false
				scanner_enabled = false
				msg.post("scanner#scanner", hash("hide"))
			
			elseif message.template == "login" then
				UI.unload_template()
				gui.set_enabled(nodes.login.dialog, true)
				UI.load_template({"login_close", "login_employ", "login_name_field_button"})
			elseif message.template == "login_name_field_button" then
				UI.enable_text_field(nodes.login.name_field, true, 24, "(Zadejte jméno)")
			elseif message.template == "login_employ" then
				UI.unload_template()
				gui.set_enabled(nodes.login.dialog, false)
				UI.reset_text_field(nodes.login.name_field)
				gui.set_enabled(nodes.employ.dialog, true)
				UI.load_template({"employ_ok"})
				msg.post("scanner#scanner", hash("get_ready"))
				scanner_enabled = true
			elseif message.template == "login_close" then
				UI.unload_template()
				gui.set_enabled(nodes.login.dialog, false)
				UI.load_template(MAIN_MENU_BUTTONS)
				UI.reset_text_field(nodes.login.name_field)
			end
		end
		--]]
	elseif message_id == hash("scan_completed") then
		if scanner_text_timer then
			timer.cancel(scanner_text_timer)
			scanner_text_timer = nil
		end
		scanner_text_timer = TEXT.write(PANEL.employ.title, "Zpracovávám...", UI.SCAN_TIME / 30, true)
		if not SET.is_desktop then
			INPUT_ENABLED = false
			scan_initiated = false
			scan_in_progress = false
			scanner_enabled = false
		end
	elseif message_id == hash("scan_evaluated") then
		if not SET.is_desktop then
			INPUT_ENABLED = true
		end
		if scanner_text_timer then
			timer.cancel(scanner_text_timer)
			scanner_text_timer = nil
		end
		gui.set_text(PANEL.employ.title, "NEZNÁMÝ UŽIVATEL!")
	end
end

function on_input(self, action_id, action)
	mouse_held = action.pressed or (mouse_held and not action.released)
	if action_id == hash("touch") then
		if (SET.is_desktop and action.released) or (not SET.is_desktop and action.pressed) then
			for key, val in ipairs(UI.active) do
				if gui.pick_node(val.node, action.x, action.y) then
					msg.post("#", hash("template_clicked"), {template = val.template, button = key})
					break
				end
			end
			UI.check_text_field(action.x, action.y)
		--elseif SET.is_desktop and not action.released then
		elseif SET.is_desktop and action.pressed then
			for key, val in ipairs(UI.active) do
				if gui.pick_node(val.node, action.x, action.y) then
					gui.play_flipbook(val.node, button_settings[val.type].down)
					local text_node = gui.get_node(val.template.."/text")
					gui.set_color(text_node, button_settings[val.type].base_text_colour)
					if button_settings[val.type].press_offset then
						gui.set_position(text_node, EMPTY_VECTOR)
						gui.animate(text_node, "position", button_settings[val.type].press_offset, go.EASING_LINEAR, BUTTON_PRESS_TIME)
						--gui.set_position(text_node, button_settings[val.type].press_offset)
					end
					break
				end
			end
		end
	elseif not action_id and SET.is_desktop then
		local new_hover
		for key, val in ipairs(UI.active) do
			local node = gui.get_node(val.template..button_settings[val.type].suffix)
			if gui.pick_node(node, action.x, action.y) then
				new_hover = key
				break
			end
		end
		if new_hover then
			if not (hover == new_hover) then
				SND.play("#hover")
				remove_hover()
				hover = new_hover
				local hover_anim = button_settings[UI.active[hover].type].hover_anim
				local hover_colour = button_settings[UI.active[hover].type].hover_colour
				if hover_anim then
					local text_node = gui.get_node(UI.active[hover].template.."/text")
					gui.set_color(text_node, button_settings[UI.active[hover].type].hover_text_colour)
					if mouse_held then
						gui.play_flipbook(UI.active[hover].node, button_settings[UI.active[hover].type].down)
						gui.animate(text_node, "position", button_settings[UI.active[hover].type].press_offset, go.EASING_LINEAR, BUTTON_PRESS_TIME)
					else
						gui.play_flipbook(UI.active[hover].node, hover_anim)
					end
				elseif hover_colour then
					gui.set_color(UI.active[hover].node, hover_colour)
				end
			end
		else
			remove_hover()
		end
	end
	if action_id == hash("key_f12") and action.pressed and SET.debug then
		SET.is_desktop = not SET.is_desktop
		print("Desktop:", SET.is_desktop)
	end
	if scanner_enabled then
		if action_id == hash("touch") and gui.pick_node(gui.get_node("employ_scanner"), action.x, action.y) then
			if action.pressed then
				msg.post("scanner#scanner", hash("scan"))
				scan_initiated = true
			end
			scan_in_progress = true
		end
	end
end

function update(self, dt)
	if scanner_enabled then
		if scan_initiated and not scan_in_progress then
			msg.post("scanner#scanner", hash("get_ready"))
			scan_initiated = false
		end
		scan_in_progress = false
	end
end